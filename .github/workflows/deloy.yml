name: Deploy User Service

on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: chatapp # Tên của service
  DOCKER_IMAGE_NAME: yughiohazx/chatapp # Tên Docker image
  DOCKER_REGISTRY: docker.io # Hoặc docker.io
  # Cổng mà service này sẽ chạy trên server
  SERVICE_PORT: 8080 # Điều chỉnh nếu cần (ví dụ: 8081 cho service B)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: "test"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Create Firebase Service Account file
        run: |
          mkdir -p src/main/resources
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > src/main/resources/firebase-service-account.json

      - name: Build Service Chatapp with Maven
        run: |
          mvn clean package -DskipTests

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image for Service Chatapp
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest . # Sử dụng thư mục gốc làm build context

      - name: Push Docker image for Service Chatapp
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Deploy Service Chatapp to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo "Logging into Docker Registry on server..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "Stopping and removing existing container (if any)..."
            docker stop $(docker ps -q) && docker rm $(docker ps -aq) && docker rmi -f $(docker images -q)

            echo "Pulling latest Docker image for ${{ env.SERVICE_NAME }}..."
            docker pull ${{env.DOCKER_IMAGE_NAME}}:latest

            echo "Running new container for ${{ env.SERVICE_NAME }}..."
            docker compose up -d
            echo "Deployment of ${{ env.SERVICE_NAME }} completed!"
